import { lispish } from '../../../src'

describe('string functions', () => {
  describe('substring', () => {
    test('samples', () => {
      expect(() => lispish(`(substring "abcde")`)).toThrow()
      expect(lispish(`(substring "abcde" 0)`)).toBe('abcde')
      expect(lispish(`(substring "abcde" 1)`)).toBe('bcde')
      expect(lispish(`(substring "abcde" 2)`)).toBe('cde')
      expect(lispish(`(substring "abcde" 3)`)).toBe('de')
      expect(lispish(`(substring "abcde" 4)`)).toBe('e')
      expect(lispish(`(substring "abcde" 5)`)).toBe('')
      expect(lispish(`(substring "abcde" 6)`)).toBe('')
      expect(lispish(`(substring "abcde" 0 0)`)).toBe('')
      expect(() => lispish(`(substring "abcde" 1 0)`)).toThrow()
      expect(lispish(`(substring "abcde" 1 1)`)).toBe('')
      expect(lispish(`(substring "abcde" 1 2)`)).toBe('b')
      expect(lispish(`(substring "abcde" 1 3)`)).toBe('bc')
      expect(lispish(`(substring "abcde" 1 4)`)).toBe('bcd')
      expect(lispish(`(substring "abcde" 1 5)`)).toBe('bcde')
      expect(lispish(`(substring "abcde" 1 6)`)).toBe('bcde')
    })
  })

  describe('stringLenght', () => {
    test('samples', () => {
      expect(lispish(`(stringLength "")`)).toBe(0)
      expect(lispish(`(stringLength "1")`)).toBe(1)
      expect(lispish(`(stringLength "123")`)).toBe(3)
      expect(() => lispish(`(stringLength (array))`)).toThrow()
      expect(() => lispish(`(stringLength (array 1))`)).toThrow()
      expect(() => lispish(`(stringLength (array 1 2 3))`)).toThrow()
      expect(() => lispish(`(stringLength)`)).toThrow()
      expect(() => lispish(`(stringLength "" "")`)).toThrow()
      expect(() => lispish(`(stringLength 12)`)).toThrow()
      expect(() => lispish(`(stringLength false)`)).toThrow()
      expect(() => lispish(`(stringLength true)`)).toThrow()
      expect(() => lispish(`(stringLength null)`)).toThrow()
      expect(() => lispish(`(stringLength undefined)`)).toThrow()
      expect(() => lispish(`(stringLength (object))`)).toThrow()
    })
  })

  describe('concat', () => {
    test('samples', () => {
      expect(lispish(`(concat)`)).toBe('')
      expect(lispish(`(concat "")`)).toBe('')
      expect(lispish(`(concat "1")`)).toBe('1')
      expect(lispish(`(concat "1" "2")`)).toBe('12')
      expect(lispish(`(concat "1" "2" "three" "4")`)).toBe('12three4')
      expect(() => lispish(`(concat 0)`)).toThrow()
      expect(() => lispish(`(concat true)`)).toThrow()
      expect(() => lispish(`(concat "1" false)`)).toThrow()
      expect(() => lispish(`(concat null "m")`)).toThrow()
      expect(() => lispish(`(concat undefined)`)).toThrow()
      expect(() => lispish(`(concat (array))`)).toThrow()
      expect(() => lispish(`(concat (object))`)).toThrow()
    })
  })

  describe('aref', () => {
    test('samples', () => {
      expect(lispish('(aref "Albert" 1)')).toBe('l')
      expect(lispish('(aref "Albert" 6)')).toBeUndefined()
      expect(() => lispish('(aref "Albert" -1)')).toThrow()
      expect(() => lispish('(aref (array 1 2 3) 1)')).toThrow()
      expect(() => lispish('(aref (array 1 2 3) 3)')).toThrow()
      expect(() => lispish('(aref)')).toThrow()
      expect(() => lispish('(aref (object) 1)')).toThrow()
      expect(() => lispish('(aref null 2)')).toThrow()
      expect(() => lispish('(aref (array 1 2 3) 1 2)')).toThrow()
    })
  })

  describe('string>', () => {
    test('samples', () => {
      expect(lispish('(string> "albert" "ALBERT")')).toBe(true)
      expect(lispish('(string> "ALBERT" "albert")')).toBe(false)
      expect(lispish('(string> "albert" "alber")')).toBe(true)
      expect(lispish('(string> "albert" "albert")')).toBe(false)
      expect(lispish('(string> "alber" "albert")')).toBe(false)
      expect(() => lispish('(string>)')).toThrow()
      expect(() => lispish('(string> "a")')).toThrow()
      expect(() => lispish('(string> "a", "A", "Q")')).toThrow()
      expect(() => lispish('(string> 2 1)')).toThrow()
      expect(() => lispish('(string> null null)')).toThrow()
      expect(() => lispish('(string> undefined undefined)')).toThrow()
      expect(() => lispish('(string> true true)')).toThrow()
      expect(() => lispish('(string> false false)')).toThrow()
      expect(() => lispish('(string> "a" true)')).toThrow()
      expect(() => lispish('(string> true "a")')).toThrow()
      expect(() => lispish('(string> (array) "a")')).toThrow()
      expect(() => lispish('(string> (object) "a")')).toThrow()
    })
  })

  describe('string<', () => {
    test('samples', () => {
      expect(lispish('(string< "albert" "ALBERT")')).toBe(false)
      expect(lispish('(string< "ALBERT" "albert")')).toBe(true)
      expect(lispish('(string< "albert" "alber")')).toBe(false)
      expect(lispish('(string< "albert" "albert")')).toBe(false)
      expect(lispish('(string< "alber" "albert")')).toBe(true)
      expect(() => lispish('(string<)')).toThrow()
      expect(() => lispish('(string< "a")')).toThrow()
      expect(() => lispish('(string< "a", "A", "Q")')).toThrow()
      expect(() => lispish('(string< 2 1)')).toThrow()
      expect(() => lispish('(string< null null)')).toThrow()
      expect(() => lispish('(string< undefined undefined)')).toThrow()
      expect(() => lispish('(string< true true)')).toThrow()
      expect(() => lispish('(string< false false)')).toThrow()
      expect(() => lispish('(string< "a" true)')).toThrow()
      expect(() => lispish('(string< true "a")')).toThrow()
      expect(() => lispish('(string< (array) "a")')).toThrow()
      expect(() => lispish('(string< (object) "a")')).toThrow()
    })
  })

  describe('string>=', () => {
    test('samples', () => {
      expect(lispish('(string>= "albert" "ALBERT")')).toBe(true)
      expect(lispish('(string>= "ALBERT" "albert")')).toBe(false)
      expect(lispish('(string>= "albert" "alber")')).toBe(true)
      expect(lispish('(string>= "albert" "albert")')).toBe(true)
      expect(lispish('(string>= "alber" "albert")')).toBe(false)
      expect(() => lispish('(string>=)')).toThrow()
      expect(() => lispish('(string>= "a")')).toThrow()
      expect(() => lispish('(string>= "a", "A", "Q")')).toThrow()
      expect(() => lispish('(string>= 2 1)')).toThrow()
      expect(() => lispish('(string>= null null)')).toThrow()
      expect(() => lispish('(string>= undefined undefined)')).toThrow()
      expect(() => lispish('(string>= true true)')).toThrow()
      expect(() => lispish('(string>= false false)')).toThrow()
      expect(() => lispish('(string>= "a" true)')).toThrow()
      expect(() => lispish('(string>= true "a")')).toThrow()
      expect(() => lispish('(string>= (array) "a")')).toThrow()
      expect(() => lispish('(string>= (object) "a")')).toThrow()
    })
  })

  describe('string<=', () => {
    test('samples', () => {
      expect(lispish('(string<= "albert" "ALBERT")')).toBe(false)
      expect(lispish('(string<= "ALBERT" "albert")')).toBe(true)
      expect(lispish('(string<= "albert" "alber")')).toBe(false)
      expect(lispish('(string<= "albert" "albert")')).toBe(true)
      expect(lispish('(string<= "alber" "albert")')).toBe(true)
      expect(() => lispish('(string<=)')).toThrow()
      expect(() => lispish('(string<= "a")')).toThrow()
      expect(() => lispish('(string<= "a", "A", "Q")')).toThrow()
      expect(() => lispish('(string<= 2 1)')).toThrow()
      expect(() => lispish('(string<= null null)')).toThrow()
      expect(() => lispish('(string<= undefined undefined)')).toThrow()
      expect(() => lispish('(string<= true true)')).toThrow()
      expect(() => lispish('(string<= false false)')).toThrow()
      expect(() => lispish('(string<= "a" true)')).toThrow()
      expect(() => lispish('(string<= true "a")')).toThrow()
      expect(() => lispish('(string<= (array) "a")')).toThrow()
      expect(() => lispish('(string<= (object) "a")')).toThrow()
    })
  })
})
