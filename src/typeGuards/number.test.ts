import type { DebugInfo } from '../tokenizer/interface'
import { assertNumber, asNumber, isNumber } from './number'

describe(`number type guards`, () => {
  const debugInfo: DebugInfo = {
    code: ``,
  }

  test(`assertInteger`, () => {
    expect(() => assertNumber(-0, debugInfo, { integer: true })).not.toThrow()
    expect(() => assertNumber(-1, debugInfo, { integer: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { integer: true })).not.toThrow()
    expect(() => assertNumber(-0.1, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber(1.00001, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber(`k`, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { integer: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { integer: true })).toThrow()
  })

  test(`assertPositiveNumber`, () => {
    expect(() => assertNumber(-1, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(-0.5, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(0, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(0.5, debugInfo, { positive: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { positive: true })).not.toThrow()
    expect(() => assertNumber(`1`, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { positive: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { positive: true })).toThrow()
  })
  test(`assertNegativeNumber`, () => {
    expect(() => assertNumber(-1, debugInfo, { negative: true })).not.toThrow()
    expect(() => assertNumber(-0.5, debugInfo, { negative: true })).not.toThrow()
    expect(() => assertNumber(0, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(0.5, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(1, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(`1`, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { negative: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { negative: true })).toThrow()
  })
  test(`assertNonNegativeNumber`, () => {
    expect(() => assertNumber(-1, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(-1.1, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(0, debugInfo, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(0.1, debugInfo, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(1.1, debugInfo, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(`1`, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { nonNegative: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { nonNegative: true })).toThrow()
  })
  test(`assertNonPositiveNumber`, () => {
    expect(() => assertNumber(-1, debugInfo, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(-1.1, debugInfo, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(0, debugInfo, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(0.1, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(1, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(1.1, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(`1`, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { nonPositive: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { nonPositive: true })).toThrow()
  })
  test(`assertFiniteNumber`, () => {
    expect(() => assertNumber(-1, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(-1.1, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(0, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(0.1, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(1.1, debugInfo, { finite: true })).not.toThrow()
    expect(() => assertNumber(Math.asin(2), debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(1 / 0, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(`1`, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { finite: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { finite: true })).toThrow()
  })
  test(`asFiniteNumber`, () => {
    expect(asNumber(-1, debugInfo, { finite: true })).toBe(-1)
    expect(asNumber(-1.1, debugInfo, { finite: true })).toBe(-1.1)
    expect(asNumber(0, debugInfo, { finite: true })).toBe(0)
    expect(asNumber(0.1, debugInfo, { finite: true })).toBe(0.1)
    expect(asNumber(1, debugInfo, { finite: true })).toBe(1)
    expect(asNumber(1.1, debugInfo, { finite: true })).toBe(1.1)
    expect(() => asNumber(Math.asin(2), debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(1 / 0, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(`1`, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(`1`, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber([], debugInfo, { finite: true })).toThrow()
    expect(() => asNumber({}, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(true, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(false, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(null, debugInfo, { finite: true })).toThrow()
    expect(() => asNumber(undefined, debugInfo, { finite: true })).toThrow()
  })
  test(`assertNumberGt`, () => {
    expect(() => assertNumber(0, debugInfo, { gt: 1 })).toThrow()
    expect(() => assertNumber(0.5, debugInfo, { gt: 1 })).toThrow()
    expect(() => assertNumber(1, debugInfo, { gt: 1 })).toThrow()
    expect(() => assertNumber(1.5, debugInfo, { gt: 1 })).not.toThrow()
    expect(() => assertNumber(2, debugInfo, { gt: 1 })).not.toThrow()
    expect(() => assertNumber(`2`, debugInfo, { gt: 1 })).toThrow()
    expect(() => assertNumber([], debugInfo, { gt: 1 })).toThrow()
    expect(() => assertNumber(false, debugInfo, { gt: 1 })).toThrow()
  })
  test(`assertNumberGte`, () => {
    expect(() => assertNumber(0, debugInfo, { gte: 1 })).toThrow()
    expect(() => assertNumber(0.5, debugInfo, { gte: 1 })).toThrow()
    expect(() => assertNumber(1, debugInfo, { gte: 1 })).not.toThrow()
    expect(() => assertNumber(1.5, debugInfo, { gte: 1 })).not.toThrow()
    expect(() => assertNumber(2, debugInfo, { gte: 1 })).not.toThrow()
    expect(() => assertNumber(`2`, debugInfo, { gte: 1 })).toThrow()
    expect(() => assertNumber([], debugInfo, { gte: 1 })).toThrow()
    expect(() => assertNumber(false, debugInfo, { gte: 1 })).toThrow()
  })
  test(`assertNumberLt`, () => {
    expect(() => assertNumber(0, debugInfo, { lt: 1 })).not.toThrow()
    expect(() => assertNumber(0.5, debugInfo, { lt: 1 })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { lt: 1 })).toThrow()
    expect(() => assertNumber(1.5, debugInfo, { lt: 1 })).toThrow()
    expect(() => assertNumber(2, debugInfo, { lt: 1 })).toThrow()
    expect(() => assertNumber(`2`, debugInfo, { lt: 1 })).toThrow()
    expect(() => assertNumber([], debugInfo, { lt: 1 })).toThrow()
    expect(() => assertNumber(false, debugInfo, { lt: 1 })).toThrow()
  })
  test(`assertNumberLte`, () => {
    expect(() => assertNumber(0, debugInfo, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(0.5, debugInfo, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(1.5, debugInfo, { lte: 1 })).toThrow()
    expect(() => assertNumber(2, debugInfo, { lte: 1 })).toThrow()
    expect(() => assertNumber(`2`, debugInfo, { lte: 1 })).toThrow()
    expect(() => assertNumber([], debugInfo, { lte: 1 })).toThrow()
    expect(() => assertNumber(false, debugInfo, { lte: 1 })).toThrow()
  })
  test(`assertNumberNotZero`, () => {
    expect(() => assertNumber(-1, debugInfo, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(-0.5, debugInfo, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(0, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber(0.5, debugInfo, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(`1`, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber([], debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber({}, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber(true, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber(false, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber(null, debugInfo, { nonZero: true })).toThrow()
    expect(() => assertNumber(undefined, debugInfo, { nonZero: true })).toThrow()
  })

  test(`isNumber`, () => {
    expect(isNumber(1 / 0)).toBe(true)
    expect(isNumber(Number(`abc`))).toBe(true)
    expect(isNumber(0.12)).toBe(true)
    expect(isNumber(undefined)).toBe(false)
    expect(isNumber(`undefined`)).toBe(false)
    expect(isNumber([])).toBe(false)
  })

  test(`asInteger`, () => {
    expect(() => asNumber(1 / 0, debugInfo, { integer: true })).toThrow()
    expect(() => asNumber(Number(`abc`), debugInfo, { integer: true })).toThrow()
    expect(() => asNumber(12, debugInfo, { integer: true })).not.toThrow()
    expect(() => asNumber(undefined, debugInfo, { integer: true })).toThrow()
    expect(() => asNumber(`undefined`, debugInfo, { integer: true })).toThrow()
    expect(() => asNumber([], debugInfo, { integer: true })).toThrow()
  })

  test(`isInteger`, () => {
    expect(isNumber(1 / 0, { integer: true })).toBe(false)
    expect(isNumber(Number(`abc`), { integer: true })).toBe(false)
    expect(isNumber(0.12, { integer: true })).toBe(false)
    expect(isNumber(-12, { integer: true })).toBe(true)
    expect(isNumber(0, { integer: true })).toBe(true)
    expect(isNumber(12, { integer: true })).toBe(true)
    expect(isNumber(undefined, { integer: true })).toBe(false)
    expect(isNumber(`undefined`, { integer: true })).toBe(false)
    expect(isNumber([], { integer: true })).toBe(false)
  })

  test(`assertNumber`, () => {
    expect(() => assertNumber(1 / 0, debugInfo)).not.toThrow()
    expect(() => assertNumber(Number(`abc`), debugInfo)).not.toThrow()
    expect(() => assertNumber(0.12, debugInfo)).not.toThrow()
    expect(() => assertNumber(undefined, debugInfo)).toThrow()
    expect(() => assertNumber(`undefined`, debugInfo)).toThrow()
    expect(() => assertNumber([], debugInfo)).toThrow()
  })

  test(`assertMax`, () => {
    expect(() => assertNumber(12, debugInfo, { lte: 10 })).toThrow()
    expect(() => assertNumber(-12, debugInfo, { lte: -10 })).not.toThrow()
    expect(() => assertNumber(-8, debugInfo, { lte: -10 })).toThrow()
    expect(() => assertNumber(10, debugInfo, { lte: 10 })).not.toThrow()
    expect(() => assertNumber(0, debugInfo, { lte: 10 })).not.toThrow()
  })

  test(`number`, () => {
    expect(() => assertNumber(0, debugInfo, { zero: true })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { zero: true })).toThrow()
    expect(() => assertNumber(1.5, debugInfo, { gt: 1, lt: 2 })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { gt: 1, lt: 2 })).toThrow()
    expect(() => assertNumber(2, debugInfo, { gt: 1, lt: 2 })).toThrow()
    expect(() => assertNumber(1.5, debugInfo, { gte: 1, lte: 2 })).not.toThrow()
    expect(() => assertNumber(1, debugInfo, { gte: 1, lte: 2 })).not.toThrow()
    expect(() => assertNumber(2.5, debugInfo, { gte: 1, lte: 2 })).toThrow()
  })
})
