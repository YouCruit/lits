import { DataType } from '../src/analyze/dataTypes/DataType'

describe(`DataType`, () => {
  describe(`disjuctions (or)`, () => {
    test(`create nilable types`, () => {
      expect(DataType.or(DataType.nil, DataType.boolean).isNilableBoolean()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.string).isNilableString()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.number).isNilableNumber()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.array).isNilableArray()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.object).isNilableObject()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.function).isNilableFunction()).toBe(true)
      expect(DataType.or(DataType.nil, DataType.regexp).isNilableRegexp()).toBe(true)
    })
    test(`the disjunction over all types should be unknown`, () => {
      expect(
        DataType.or(
          DataType.nil,
          DataType.boolean,
          DataType.string,
          DataType.number,
          DataType.array,
          DataType.object,
          DataType.function,
          DataType.regexp,
        ).isUnknown(),
      ).toBe(true)
    })
    test(`the disjunction over all nilable types should be unknown`, () => {
      expect(
        DataType.or(
          DataType.nilableBoolean,
          DataType.nilableString,
          DataType.nilableNumber,
          DataType.nilableArray,
          DataType.nilableObject,
          DataType.nilableFunction,
          DataType.nilableRegexp,
        ).isUnknown(),
      ).toBe(true)
    })
  })
  describe(`primitives`, () => {
    test(`nil`, () => {
      const dataType = DataType.nil
      expect(dataType.isNil()).toBe(true)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`boolean`, () => {
      const dataType = DataType.boolean
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(true)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableBoolean`, () => {
      const dataType = DataType.nilableBoolean
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(true)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`string`, () => {
      const dataType = DataType.string
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(true)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableString`, () => {
      const dataType = DataType.nilableString
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(true)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`number`, () => {
      const dataType = DataType.number
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(true)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableNumber`, () => {
      const dataType = DataType.nilableNumber
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(true)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`array`, () => {
      const dataType = DataType.array
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(true)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableArray`, () => {
      const dataType = DataType.nilableArray
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(true)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`object`, () => {
      const dataType = DataType.object
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(true)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableObject`, () => {
      const dataType = DataType.nilableObject
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(true)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`regexp`, () => {
      const dataType = DataType.regexp
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(true)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableRegexp`, () => {
      const dataType = DataType.nilableRegexp
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(true)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`function`, () => {
      const dataType = DataType.function
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(true)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`nilableFunction`, () => {
      const dataType = DataType.nilableFunction
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(true)
      expect(dataType.isUnknown()).toBe(false)
    })
    test(`unknown`, () => {
      const dataType = DataType.unknown
      expect(dataType.isNil()).toBe(false)
      expect(dataType.isBoolean()).toBe(false)
      expect(dataType.isNilableBoolean()).toBe(false)
      expect(dataType.isString()).toBe(false)
      expect(dataType.isNilableString()).toBe(false)
      expect(dataType.isNumber()).toBe(false)
      expect(dataType.isNilableNumber()).toBe(false)
      expect(dataType.isArray()).toBe(false)
      expect(dataType.isNilableArray()).toBe(false)
      expect(dataType.isObject()).toBe(false)
      expect(dataType.isNilableObject()).toBe(false)
      expect(dataType.isRegexp()).toBe(false)
      expect(dataType.isNilableRegexp()).toBe(false)
      expect(dataType.isFunction()).toBe(false)
      expect(dataType.isNilableFunction()).toBe(false)
      expect(dataType.isUnknown()).toBe(true)
    })
  })
})
