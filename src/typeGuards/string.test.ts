import { asString, assertString } from './string'

describe(`string type guards`, () => {
  test(`asNonEmptyString`, () => {
    expect(asString(`1`, undefined, { nonEmpty: true })).toBe(`1`)
    expect(() => asString(``, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(0, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(1, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(true, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(false, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(null, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString(undefined, undefined, { nonEmpty: true })).toThrow()
    expect(() => asString([], undefined, { nonEmpty: true })).toThrow()
    expect(() => asString({}, undefined, { nonEmpty: true })).toThrow()
  })

  test(`assertString`, () => {
    expect(() => assertString(``, undefined)).not.toThrow()
    expect(() => assertString(`1`, undefined)).not.toThrow()
    expect(() => assertString(0, undefined)).toThrow()
    expect(() => assertString(1, undefined)).toThrow()
    expect(() => assertString(true, undefined)).toThrow()
    expect(() => assertString(false, undefined)).toThrow()
    expect(() => assertString(null, undefined)).toThrow()
    expect(() => assertString(undefined, undefined)).toThrow()
    expect(() => assertString([], undefined)).toThrow()
    expect(() => assertString({}, undefined)).toThrow()
  })
  test(`asString`, () => {
    expect(() => asString(``, undefined)).not.toThrow()
    expect(() => asString(`1`, undefined)).not.toThrow()
    expect(() => asString(0, undefined)).toThrow()
    expect(() => asString(1, undefined)).toThrow()
    expect(() => asString(true, undefined)).toThrow()
    expect(() => asString(false, undefined)).toThrow()
    expect(() => asString(null, undefined)).toThrow()
    expect(() => asString(undefined, undefined)).toThrow()
    expect(() => asString([], undefined)).toThrow()
    expect(() => asString({}, undefined)).toThrow()
  })
  test(`assertNonEmptyString`, () => {
    expect(() => assertString(`1`, undefined, { nonEmpty: true })).not.toThrow()
    expect(() => assertString(`abc`, undefined, { nonEmpty: true })).not.toThrow()
    expect(() => assertString(``, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(0, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(1, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(true, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(false, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(null, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString(undefined, undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString([], undefined, { nonEmpty: true })).toThrow()
    expect(() => assertString({}, undefined, { nonEmpty: true })).toThrow()
  })

  test(`assertChar`, () => {
    expect(() => assertString(`2`, undefined, { char: true })).not.toThrow()
    expect(() => assertString(`Albert`, undefined, { char: true })).toThrow()
    expect(() => assertString(0, undefined, { char: true })).toThrow()
    expect(() => assertString(null, undefined, { char: true })).toThrow()
    expect(() => assertString(true, undefined, { char: true })).toThrow()
    expect(() => assertString(false, undefined, { char: true })).toThrow()
    expect(() => assertString([`a`], undefined, { char: true })).toThrow()
    expect(() => assertString({ a: `a` }, undefined, { char: true })).toThrow()
  })
  test(`asChar`, () => {
    expect(asString(`2`, undefined, { char: true })).toBe(`2`)
    expect(() => asString(`Albert`, undefined, { char: true })).toThrow()
    expect(() => asString(0, undefined, { char: true })).toThrow()
    expect(() => asString(null, undefined, { char: true })).toThrow()
    expect(() => asString(true, undefined, { char: true })).toThrow()
    expect(() => asString(false, undefined, { char: true })).toThrow()
    expect(() => asString([`a`], undefined, { char: true })).toThrow()
    expect(() => asString({ a: `a` }, undefined, { char: true })).toThrow()
  })

  test(`character`, () => {
    expect(() => assertString(`k`, undefined, { char: true })).not.toThrow()
    expect(() => assertString(`k1`, undefined, { char: true })).toThrow()
    expect(() => assertString(1, undefined, { char: true })).toThrow()
  })
})
