import { lispish } from '../../../src'

describe('predicates', () => {
  describe('function?', () => {
    test('samples', () => {
      expect(lispish(`(function? "")`)).toBe(false)
      expect(lispish(`(function? "x")`)).toBe(false)
      expect(lispish(`(function? 1)`)).toBe(false)
      expect(lispish(`(function? 0)`)).toBe(false)
      expect(lispish(`(function? (list))`)).toBe(false)
      expect(lispish(`(function? (object))`)).toBe(false)
      expect(lispish(`(function? null)`)).toBe(false)
      expect(lispish(`(function? true)`)).toBe(false)
      expect(lispish(`(function? false)`)).toBe(false)
      expect(lispish(`(function? undefined)`)).toBe(false)
      expect(lispish(`(function? #'+)`)).toBe(true)
      expect(lispish(`(function? (function +))`)).toBe(true)
      expect(() => lispish(`(function?)`)).toThrow()
      expect(() => lispish(`(function? "k" "k")`)).toThrow()
    })
  })

  describe('string?', () => {
    test('samples', () => {
      expect(lispish(`(string? "")`)).toBe(true)
      expect(lispish(`(string? "x")`)).toBe(true)
      expect(lispish(`(string? 1)`)).toBe(false)
      expect(lispish(`(string? 0)`)).toBe(false)
      expect(lispish(`(string? (list))`)).toBe(false)
      expect(lispish(`(string? (object))`)).toBe(false)
      expect(lispish(`(string? null)`)).toBe(false)
      expect(lispish(`(string? true)`)).toBe(false)
      expect(lispish(`(string? false)`)).toBe(false)
      expect(lispish(`(string? undefined)`)).toBe(false)
      expect(lispish(`(string? #'+)`)).toBe(false)
      expect(lispish(`(string? (function +))`)).toBe(false)
      expect(() => lispish(`(string?)`)).toThrow()
      expect(() => lispish(`(string? "k" "k")`)).toThrow()
    })
  })

  describe('number?', () => {
    test('samples', () => {
      expect(lispish(`(number? 1)`)).toBe(true)
      expect(lispish(`(number? 0)`)).toBe(true)
      expect(lispish(`(number? -1)`)).toBe(true)
      expect(lispish(`(number? -1.123)`)).toBe(true)
      expect(lispish(`(number? 0.123)`)).toBe(true)
      expect(lispish(`(number? "")`)).toBe(false)
      expect(lispish(`(number? "x")`)).toBe(false)
      expect(lispish(`(number? (list))`)).toBe(false)
      expect(lispish(`(number? (object))`)).toBe(false)
      expect(lispish(`(number? null)`)).toBe(false)
      expect(lispish(`(number? false)`)).toBe(false)
      expect(lispish(`(number? true)`)).toBe(false)
      expect(lispish(`(number? undefined)`)).toBe(false)
      expect(lispish(`(number? #'+)`)).toBe(false)
      expect(lispish(`(number? (function +))`)).toBe(false)
      expect(() => lispish(`(number?)`)).toThrow()
      expect(() => lispish(`(number? 1 2)`)).toThrow()
    })
  })

  describe('integer?', () => {
    test('samples', () => {
      expect(lispish(`(integer? 1)`)).toBe(true)
      expect(lispish(`(integer? 0)`)).toBe(true)
      expect(lispish(`(integer? -1)`)).toBe(true)
      expect(lispish(`(integer? -1.123)`)).toBe(false)
      expect(lispish(`(integer? 0.123)`)).toBe(false)
      expect(lispish(`(integer? "")`)).toBe(false)
      expect(lispish(`(integer? "x")`)).toBe(false)
      expect(lispish(`(integer? (list))`)).toBe(false)
      expect(lispish(`(integer? (object))`)).toBe(false)
      expect(lispish(`(integer? null)`)).toBe(false)
      expect(lispish(`(integer? false)`)).toBe(false)
      expect(lispish(`(integer? true)`)).toBe(false)
      expect(lispish(`(integer? undefined)`)).toBe(false)
      expect(lispish(`(integer? #'+)`)).toBe(false)
      expect(lispish(`(integer? (function +))`)).toBe(false)
      expect(() => lispish(`(integer?)`)).toThrow()
      expect(() => lispish(`(integer? 1 2)`)).toThrow()
    })
  })

  describe('boolean?', () => {
    test('samples', () => {
      expect(lispish(`(boolean? 1)`)).toBe(false)
      expect(lispish(`(boolean? 0)`)).toBe(false)
      expect(lispish(`(boolean? -1)`)).toBe(false)
      expect(lispish(`(boolean? -1.123)`)).toBe(false)
      expect(lispish(`(boolean? 0.123)`)).toBe(false)
      expect(lispish(`(boolean? "")`)).toBe(false)
      expect(lispish(`(boolean? "x")`)).toBe(false)
      expect(lispish(`(boolean? (list))`)).toBe(false)
      expect(lispish(`(boolean? (object))`)).toBe(false)
      expect(lispish(`(boolean? null)`)).toBe(false)
      expect(lispish(`(boolean? false)`)).toBe(true)
      expect(lispish(`(boolean? true)`)).toBe(true)
      expect(lispish(`(boolean? undefined)`)).toBe(false)
      expect(lispish(`(boolean? #'+)`)).toBe(false)
      expect(lispish(`(boolean? (function +))`)).toBe(false)
      expect(() => lispish(`(boolean?)`)).toThrow()
      expect(() => lispish(`(boolean? true false)`)).toThrow()
    })
  })

  describe('undefined?', () => {
    test('samples', () => {
      expect(lispish(`(undefined? 1)`)).toBe(false)
      expect(lispish(`(undefined? 0)`)).toBe(false)
      expect(lispish(`(undefined? -1)`)).toBe(false)
      expect(lispish(`(undefined? -1.123)`)).toBe(false)
      expect(lispish(`(undefined? 0.123)`)).toBe(false)
      expect(lispish(`(undefined? "")`)).toBe(false)
      expect(lispish(`(undefined? "x")`)).toBe(false)
      expect(lispish(`(undefined? (list))`)).toBe(false)
      expect(lispish(`(undefined? (object))`)).toBe(false)
      expect(lispish(`(undefined? null)`)).toBe(false)
      expect(lispish(`(undefined? false)`)).toBe(false)
      expect(lispish(`(undefined? true)`)).toBe(false)
      expect(lispish(`(undefined? undefined)`)).toBe(true)
      expect(lispish(`(undefined? #'+)`)).toBe(false)
      expect(lispish(`(undefined? (function +))`)).toBe(false)
      expect(() => lispish(`(undefined?)`)).toThrow()
      expect(() => lispish(`(undefined? true false)`)).toThrow()
    })
  })

  describe('null?', () => {
    test('samples', () => {
      expect(lispish(`(null? 1)`)).toBe(false)
      expect(lispish(`(null? 0)`)).toBe(false)
      expect(lispish(`(null? -1)`)).toBe(false)
      expect(lispish(`(null? -1.123)`)).toBe(false)
      expect(lispish(`(null? 0.123)`)).toBe(false)
      expect(lispish(`(null? "")`)).toBe(false)
      expect(lispish(`(null? "x")`)).toBe(false)
      expect(lispish(`(null? (list))`)).toBe(false)
      expect(lispish(`(null? (object))`)).toBe(false)
      expect(lispish(`(null? null)`)).toBe(true)
      expect(lispish(`(null? false)`)).toBe(false)
      expect(lispish(`(null? true)`)).toBe(false)
      expect(lispish(`(null? undefined)`)).toBe(false)
      expect(lispish(`(null? #'+)`)).toBe(false)
      expect(lispish(`(null? (function +))`)).toBe(false)
      expect(() => lispish(`(null?)`)).toThrow()
      expect(() => lispish(`(null? true false)`)).toThrow()
    })
  })

  describe('zero?', () => {
    test('samples', () => {
      expect(lispish(`(zero? 1)`)).toBe(false)
      expect(lispish(`(zero? 0)`)).toBe(true)
      expect(lispish(`(zero? -0)`)).toBe(true)
      expect(lispish(`(zero? (/ 0 -1))`)).toBe(true)
      expect(lispish(`(zero? -1)`)).toBe(false)
      expect(() => lispish(`(zero?)`)).toThrow()
      expect(() => lispish(`(zero? "")`)).toThrow()
      expect(() => lispish(`(zero? true)`)).toThrow()
      expect(() => lispish(`(zero? false)`)).toThrow()
      expect(() => lispish(`(zero? null)`)).toThrow()
      expect(() => lispish(`(zero? undefined)`)).toThrow()
      expect(() => lispish(`(zero? (object))`)).toThrow()
      expect(() => lispish(`(zero? (list))`)).toThrow()
    })
  })

  describe('even?', () => {
    test('samples', () => {
      expect(lispish(`(even? 1)`)).toBe(false)
      expect(lispish(`(even? 0)`)).toBe(true)
      expect(lispish(`(even? -0)`)).toBe(true)
      expect(lispish(`(even? (/ 0 -1))`)).toBe(true)
      expect(lispish(`(even? -1)`)).toBe(false)
      expect(lispish(`(even? -10)`)).toBe(true)
      expect(lispish(`(even? -2.001)`)).toBe(false)
      expect(lispish(`(even? 4)`)).toBe(true)
      expect(() => lispish(`(even?)`)).toThrow()
      expect(() => lispish(`(even? "")`)).toThrow()
      expect(() => lispish(`(even? true)`)).toThrow()
      expect(() => lispish(`(even? false)`)).toThrow()
      expect(() => lispish(`(even? null)`)).toThrow()
      expect(() => lispish(`(even? undefined)`)).toThrow()
      expect(() => lispish(`(even? (object))`)).toThrow()
      expect(() => lispish(`(even? (list))`)).toThrow()
    })
  })

  describe('odd?', () => {
    test('samples', () => {
      expect(lispish(`(odd? 1)`)).toBe(true)
      expect(lispish(`(odd? 0)`)).toBe(false)
      expect(lispish(`(odd? -0)`)).toBe(false)
      expect(lispish(`(odd? (/ 0 -1))`)).toBe(false)
      expect(lispish(`(odd? -1)`)).toBe(true)
      expect(lispish(`(odd? -10)`)).toBe(false)
      expect(lispish(`(odd? -2.001)`)).toBe(false)
      expect(lispish(`(odd? 4)`)).toBe(false)
      expect(lispish(`(odd? 5)`)).toBe(true)
      expect(() => lispish(`(odd?)`)).toThrow()
      expect(() => lispish(`(odd? "")`)).toThrow()
      expect(() => lispish(`(odd? true)`)).toThrow()
      expect(() => lispish(`(odd? false)`)).toThrow()
      expect(() => lispish(`(odd? null)`)).toThrow()
      expect(() => lispish(`(odd? undefined)`)).toThrow()
      expect(() => lispish(`(odd? (object))`)).toThrow()
      expect(() => lispish(`(odd? (list))`)).toThrow()
    })
  })

  describe('list?', () => {
    test('samples', () => {
      expect(lispish(`(list? 1)`)).toBe(false)
      expect(lispish(`(list? 0)`)).toBe(false)
      expect(lispish(`(list? -1)`)).toBe(false)
      expect(lispish(`(list? -1.123)`)).toBe(false)
      expect(lispish(`(list? 0.123)`)).toBe(false)
      expect(lispish(`(list? "")`)).toBe(false)
      expect(lispish(`(list? "x")`)).toBe(false)
      expect(lispish(`(list? (list))`)).toBe(true)
      expect(lispish(`(list? (object))`)).toBe(false)
      expect(lispish(`(list? null)`)).toBe(false)
      expect(lispish(`(list? false)`)).toBe(false)
      expect(lispish(`(list? true)`)).toBe(false)
      expect(lispish(`(list? undefined)`)).toBe(false)
      expect(lispish(`(list? #'+)`)).toBe(false)
      expect(lispish(`(list? (function +))`)).toBe(false)
      expect(() => lispish(`(list?)`)).toThrow()
      expect(() => lispish(`(list? true false)`)).toThrow()
    })
  })

  describe('object?', () => {
    test('samples', () => {
      expect(lispish(`(object? 1)`)).toBe(false)
      expect(lispish(`(object? 0)`)).toBe(false)
      expect(lispish(`(object? -1)`)).toBe(false)
      expect(lispish(`(object? -1.123)`)).toBe(false)
      expect(lispish(`(object? 0.123)`)).toBe(false)
      expect(lispish(`(object? "")`)).toBe(false)
      expect(lispish(`(object? "x")`)).toBe(false)
      expect(lispish(`(object? (list))`)).toBe(false)
      expect(lispish(`(object? (object "x" 10))`)).toBe(true)
      expect(lispish(`(object? null)`)).toBe(false)
      expect(lispish(`(object? (regexp "abc"))`)).toBe(false)
      expect(lispish(`(object? false)`)).toBe(false)
      expect(lispish(`(object? true)`)).toBe(false)
      expect(lispish(`(object? undefined)`)).toBe(false)
      expect(lispish(`(object? #'+)`)).toBe(false)
      expect(lispish(`(object? (function +))`)).toBe(false)
      expect(() => lispish(`(object?)`)).toThrow()
      expect(() => lispish(`(object? true false)`)).toThrow()
    })
  })

  describe('regexp?', () => {
    test('samples', () => {
      expect(lispish(`(regexp? 1)`)).toBe(false)
      expect(lispish(`(regexp? 0)`)).toBe(false)
      expect(lispish(`(regexp? -1)`)).toBe(false)
      expect(lispish(`(regexp? -1.123)`)).toBe(false)
      expect(lispish(`(regexp? 0.123)`)).toBe(false)
      expect(lispish(`(regexp? "")`)).toBe(false)
      expect(lispish(`(regexp? "x")`)).toBe(false)
      expect(lispish(`(regexp? (list))`)).toBe(false)
      expect(lispish(`(regexp? (object "x" 10))`)).toBe(false)
      expect(lispish(`(regexp? null)`)).toBe(false)
      expect(lispish(`(regexp? (regexp "abc"))`)).toBe(true)
      expect(lispish(`(regexp? false)`)).toBe(false)
      expect(lispish(`(regexp? true)`)).toBe(false)
      expect(lispish(`(regexp? undefined)`)).toBe(false)
      expect(lispish(`(regexp? #'+)`)).toBe(false)
      expect(lispish(`(regexp? (function +))`)).toBe(false)
      expect(() => lispish(`(regexp?)`)).toThrow()
      expect(() => lispish(`(regexp? true false)`)).toThrow()
    })
  })

  describe('empty?', () => {
    test('samples', () => {
      expect(lispish(`(empty? (list))`)).toBe(true)
      expect(lispish(`(empty? (list 0))`)).toBe(false)
      expect(() => lispish(`(empty?)`)).toThrow()
      expect(() => lispish(`(empty?)`)).toThrow()
      expect(() => lispish(`(empty? true)`)).toThrow()
      expect(() => lispish(`(empty? false)`)).toThrow()
      expect(() => lispish(`(empty? null)`)).toThrow()
      expect(() => lispish(`(empty? undefined)`)).toThrow()
      expect(() => lispish(`(empty? "A string")`)).toThrow()
      expect(() => lispish(`(empty? 10)`)).toThrow()
      expect(() => lispish(`(empty? (object))`)).toThrow()
      expect(() => lispish(`(empty? (regexp "^start"))`)).toThrow()
    })
  })
})
